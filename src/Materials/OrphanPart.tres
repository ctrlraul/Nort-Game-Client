[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://b0gfd63ot4box"]

[sub_resource type="Shader" id="Shader_eewoe"]
code = "shader_type canvas_item;

uniform sampler2D reflections_noise;
uniform sampler2D dissolving_noise;
uniform vec2 dissolve_noise_offset;
uniform bool shiny = true;
uniform float threshould = 0.5;

void fragment() {

	if (shiny)
	{
		float seed = (SCREEN_UV.x - SCREEN_UV.y) * 0.05 + TIME * 0.02;
		float noise = texture(reflections_noise, fract(vec2(seed))).r;

	  vec4 tex = texture(TEXTURE, UV);

		if (noise > 0.875) {
			if (tex.r > 0.5) {
		  	COLOR.rgb = vec3(1);
			} else {
		  	COLOR.rgb += vec3(0.3);
			}
		}

		COLOR.rgb += vec3(0.1, 0.1, 0.2) * tex.r;

		if (tex.r > 0.3) {
			COLOR.rgb += (0.3 - fract(TIME * 0.5) * 0.3) * tex.r;
		}
	}

	if (texture(dissolving_noise, fract((UV + dissolve_noise_offset) / 8.0)).r > threshould) {
		COLOR.a = 0.0;
	}

}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_5idm6"]
frequency = 0.04

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_qtkkw"]
width = 256
height = 256
seamless = true
noise = SubResource("FastNoiseLite_5idm6")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_yhjpf"]
frequency = 0.05

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_3pyiw"]
width = 2048
height = 1
generate_mipmaps = false
noise = SubResource("FastNoiseLite_yhjpf")

[resource]
resource_local_to_scene = true
shader = SubResource("Shader_eewoe")
shader_parameter/dissolve_noise_offset = Vector2(0, 0)
shader_parameter/shiny = true
shader_parameter/threshould = 1.0
shader_parameter/reflections_noise = SubResource("NoiseTexture2D_3pyiw")
shader_parameter/dissolving_noise = SubResource("NoiseTexture2D_qtkkw")
